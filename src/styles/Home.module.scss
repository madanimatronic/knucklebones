@use '../styles/variables' as *;
@use '../styles/mixins' as mixins;

// @media (prefers-color-scheme: light) {
//   .page {
//     --background: $full-white;
//     --foreground: $full-black;
//   }
// }

.page {
  // --background: $full-black;
  // --foreground: $full-white;

  display: flex;
  align-items: stretch;

  color: $full-white;
  background-color: $full-black;

  min-height: 100svh;
  padding: 30px;

  font-size: 36px;
  line-height: 1.2;
  color: #a5a5a5;
  font-family: var(--font-alkalami);
}

.main {
  width: 100%;
  display: grid;
  grid-auto-flow: column;
  grid-template-rows: 1fr 160px 1fr;
  // Можно выделить место в % или фракциях
  // grid-template-rows: 1fr 15% 1fr;
  // grid-template-rows: 10fr 4fr 10fr;
  grid-template-columns: 1fr 1fr 1fr;
  // Альтернативный способ:
  // grid-template-columns: 1fr auto 1fr;
  align-items: center;
  justify-items: center;
  @include mixins.custom-dashed-border(2px, $full-red);
}

.widgets {
  // max-width: 310px;
  // max-height: 320px;
  // width: 100%;
  // height: 100%;
}

.field {
}

.playerWidgets {
  grid-row: 3;
}

.playerField {
  grid-row: 3;
  grid-column: 2;
}

.gameResultContainer {
  display: flex;
  flex-direction: column;
  row-gap: 5px;
  align-items: center;
  grid-row: 2;
  grid-column: 2;
  // Второй вариант - растянуть этот блок:
  // grid-column: 1 / 4;
  .message {
    text-align: center;
  }
  .restartButton {
    font-family: inherit;
    height: 58px;
    font-size: inherit;
    border: 3px solid $full-black;
    background-color: #c23d3d;
    text-align: center;
    padding: 0px 24px;

    &:hover {
      cursor: pointer;
      background-color: #a73535;
    }

    &:focus-visible {
      outline: 2px solid $full-white;
    }
  }
  .hidden {
    visibility: hidden;
  }
}

.botField {
  grid-row: 1;
  grid-column: 2;
}

.botWidgets {
  grid-row: 1;
  grid-column: 3;
}

// TODO:
// В стилях страници можно прописать стили и медиа-правила адаптива для страницы в целом
// Компоненты стилизуются отдельно через свои медиа-правила (но лучше использовать одинаковые брейкпоинты везде)

// Можно сделать компонент определённого (максимального) размера изначально, но чтобы он мог сжиматься при необходимости
// или чтобы компонент занимал максимум места, если верхнему в его иерархии контейнеру не заданы ограничения по размеру
// (но это скорее всего не оптимальный подход)
// Далее в каждом компоненте (если требуется) прописываются свои медиа-правила, позволяющие тонко настроить его поведение
// при разных разрешениях
