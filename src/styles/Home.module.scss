@use '../styles/variables' as *;
@use '../styles/mixins' as mixins;

// @media (prefers-color-scheme: light) {
//   .page {
//     --background: $full-white;
//     --foreground: $full-black;
//   }
// }

// TODO: Убедиться, что компоненты, страница, игровые сущности и утилиты
// смогут без проблем переехать на новый проект (не должно быть жесткой привязки к этому проекту)

// TODO: собрать все цвета по файлам стилей и вынести их в переменные
.page {
  // --background: red;
  // --foreground: blue;

  display: flex;
  align-items: stretch;

  // background-color: $full-black;
  // color: #a5a5a5;
  background-color: var(--background, $full-black);
  color: var(--foreground, #ff5e5e);

  min-height: 100svh;
  padding: 30px;

  font-size: 36px;
  line-height: 1.2;
  font-family: var(--font-alkalami);

  @include mixins.responsive('lg') {
    padding: 20px;
    font-size: 30px;
  }

  @include mixins.responsive('md') {
    padding: 10px;
    font-size: 24px;
  }

  @include mixins.responsive('lg-height') {
    padding: 10px;
    font-size: 24px;
  }
}

.dark {
  --background: #000000;
  --foreground: #a5a5a5;
}

.light {
  --background: #bac299;
  --foreground: #000000;
}

// @media (prefers-color-scheme: dark) {
//   .page {
//     --background: #0a0a0a;
//     --foreground: #ededed;
//   }
// }

.main {
  --base-padding: 10px;
  --grid-column-gap: 10px;
  width: 100%;
  display: grid;
  grid-auto-flow: column;
  grid-template-rows: 1fr 160px 1fr;
  // Можно выделить место в % или фракциях
  // grid-template-rows: 1fr 15% 1fr;
  // grid-template-rows: 10fr 4fr 10fr;
  // grid-template-rows: 375fr 120fr 375fr;
  grid-template-columns: 1fr 1fr 1fr;
  // Альтернативный способ:
  // grid-template-columns: 1fr auto 1fr;
  align-items: center;
  justify-items: center;
  column-gap: var(--grid-column-gap);
  @include mixins.custom-dashed-border(2px, $full-red, var(--base-padding));

  @include mixins.responsive('md') {
    grid-template-rows: 1fr 140px 1fr;
  }

  @include mixins.responsive('sm') {
    grid-template-rows: 1fr 130px 1fr;
  }

  @include mixins.responsive('lg-height') {
    grid-template-rows: 1fr 130px 1fr;
  }

  @include mixins.responsive('md-height') {
    grid-template-rows: 1fr 120px 1fr;
  }
}

.themeButton {
  align-self: flex-start;
  justify-self: flex-start;
  cursor: pointer;

  @include mixins.responsive('sm') {
    width: 40px;
    height: 40px;
  }
}

// .widgets {
//   // max-width: 310px;
//   // max-height: 320px;
//   // width: 100%;
//   // height: 100%;
// }

// .field {
// }

.playerWidgets {
  grid-row: 3;

  @include mixins.responsive('sm') {
    grid-column: 3;
  }
}

.playerField {
  grid-row: 3;
  grid-column: 2;
}

.gameResultContainer {
  display: flex;
  flex-direction: column;
  row-gap: 5px;
  align-items: center;
  grid-row: 2;
  grid-column: 2;
  // Второй вариант - растянуть этот блок:
  // grid-column: 1 / 4;
  .message {
    text-align: center;
  }
  .restartButton {
    font-family: inherit;
    height: 58px;
    font-size: inherit;
    border: 3px solid $full-black;
    color: $full-black;
    background-color: #c23d3d;
    text-align: center;
    padding: 0px 24px;

    @include mixins.responsive('lg') {
      height: 54px;
    }

    @include mixins.responsive('md') {
      height: 46px;
    }

    @include mixins.responsive('lg-height') {
      height: 46px;
    }

    &:hover {
      cursor: pointer;
      background-color: #a73535;
    }

    &:focus-visible {
      outline: 2px solid $full-white;
    }
  }
  .hidden {
    visibility: hidden;
  }
}

.botField {
  grid-row: 1;
  grid-column: 2;
}

.botWidgets {
  grid-row: 1;
  grid-column: 3;
}

// TODO:
// В стилях страници можно прописать стили и медиа-правила адаптива для страницы в целом
// Компоненты стилизуются отдельно через свои медиа-правила (но лучше использовать одинаковые брейкпоинты везде)

// Можно сделать компонент определённого (максимального) размера изначально, но чтобы он мог сжиматься при необходимости
// или чтобы компонент занимал максимум места, если верхнему в его иерархии контейнеру не заданы ограничения по размеру
// (но это скорее всего не оптимальный подход)
// Далее в каждом компоненте (если требуется) прописываются свои медиа-правила, позволяющие тонко настроить его поведение
// при разных разрешениях
